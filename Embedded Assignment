#include "stm32f4xx.h"

#define UART_BAUDRATE 115200

void SystemClock_Config(void);
void TIM2_Init(void);
void DAC_Init(void);
void ADC_DMA_Init(void);
void UART2_Init(void);
void DMA2_Stream0_IRQHandler(void);
void USART2_IRQHandler(void);

volatile uint16_t adc_value;

int main(void) {
    SystemClock_Config();
    TIM2_Init();
    DAC_Init();
    ADC_DMA_Init();
    UART2_Init();

    while (1) {
        // Main loop does nothing, everything is interrupt driven
    }
}

void SystemClock_Config(void) {
    // Enable HSE and wait for it to be ready
    RCC->CR|=(1<<16);
    while (!(RCC->CR&(1<<17)));

    // Configure PLL: HSE as source, PLLM = 8, PLLN = 336, PLLP = 2, PLLQ = 7
    RCC->PLLCFGR=(8<<0)|(336<<6)|(0<<16)|(1<<22)|(7<<24);

    // Enable PLL and wait for it to be ready
    RCC->CR|=(1<<24);
    while (!(RCC->CR &(1<<25)));

    // Configure flash latency for 84MHz operation
    FLASH->ACR|=(2<<0);

    // Select PLL as system clock
    RCC->CFGR|=(2<<0);
    while ((RCC->CFGR &(3<<2))!=(2<<2));

    // Set AHB, APB1, and APB2 prescalers
    RCC->CFGR|=(0<<4)|(5<<10)|(4<<13);

    // Update SystemCoreClock
    SystemCoreClock=84000000;
}

void TIM2_Init(void) {
    RCC->APB1ENR |=(1<<0);
    TIM2->PSC=16000-1;
    TIM2->ARR=100-1;
    TIM2->DIER|=(1<<0);
    TIM2->CR1|=(1<<0);
    NVIC_EnableIRQ(TIM2_IRQn);
}

void TIM2_IRQHandler(void) {
    if (TIM2->SR &(1<<0)) {
        TIM2->SR &= ~(1<<0);
        DAC->DHR12R1=(TIM2->CNT &0xFFF);
    }
}

void DAC_Init(void) {
    RCC->APB1ENR |=(1<<29);
    GPIOA->MODER |=(3<<(4*2));
    DAC->CR |=(1<<0);
}

void ADC_DMA_Init(void) {
    RCC->AHB1ENR |=(1<<22);
    RCC->APB2ENR |=(1<<8);

    ADC1->CR2 |=(1<<8)|(1<<9);
    ADC1->SQR3=0;
    ADC1->CR2 |=(1<<0);

    DMA2_Stream0->PAR=(uint32_t)&ADC1->DR;
    DMA2_Stream0->M0AR=(uint32_t)&adc_value;
    DMA2_Stream0->NDTR=1;
    DMA2_Stream0->CR=(1<<4)|(1<<6)|(1<<8)|(1<<16)|(1<<0);

    NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}

void UART2_Init(void) {
    RCC->APB1ENR |=(1<<17);
    RCC->AHB1ENR |=(1<<0);

    GPIOA->MODER |=(2<<(2*2))|(2<<(3*2));
    GPIOA->AFR[0] |=(7<<(2*4))|(7<<(3*4));

    USART2->BRR =(SystemCoreClock/UART_BAUDRATE);
    USART2->CR1 =(1<<3)|(1<<2)|(1<<13)|(1<<5);

    NVIC_EnableIRQ(USART2_IRQn);
}

void DMA2_Stream0_IRQHandler(void) {
    if (DMA2->LISR & (1<<5)) {
        DMA2->LIFCR |=(1<<5);
        while (!(USART2->SR &(1<<7)));
        USART2->DR=adc_value&0xFF;
    }
}

void USART2_IRQHandler(void) {
    if (USART2->SR &(1<<5)) {
        volatile uint8_t received = USART2->DR;
    }
}
